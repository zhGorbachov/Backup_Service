// <auto-generated />
using System;
using DataLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataLayer.Migrations
{
    [DbContext(typeof(BackupContext))]
    partial class BackupContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.3.23174.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataLayer.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("IdStorage")
                        .HasColumnType("int");

                    b.Property<int?>("IdUser")
                        .HasColumnType("int");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("TariffType")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("IdStorage");

                    b.HasIndex("IdUser");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdStorage = 1,
                            Login = "Sobaka",
                            Password = "Sob",
                            TariffType = 1
                        },
                        new
                        {
                            Id = 2,
                            IdStorage = 1,
                            Login = "Cot",
                            Password = "Co",
                            TariffType = 2
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.Backup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdStorage")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Size")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TariffType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("IdStorage");

                    b.HasIndex("TariffType");

                    b.ToTable("Backups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationTime = new DateTime(2023, 5, 20, 0, 34, 43, 746, DateTimeKind.Local).AddTicks(504),
                            Name = "Sobaka123",
                            Size = 150m,
                            TariffType = 1
                        },
                        new
                        {
                            Id = 2,
                            CreationTime = new DateTime(2023, 5, 20, 0, 34, 43, 746, DateTimeKind.Local).AddTicks(538),
                            Name = "Cot123",
                            Size = 150m,
                            TariffType = 1
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.Storage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalSize")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UsedSize")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Storages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Path = "asd",
                            TotalSize = 50m,
                            UsedSize = 15m
                        },
                        new
                        {
                            Id = 2,
                            Path = "zxczxc",
                            TotalSize = 2222m,
                            UsedSize = 123m
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.Tariff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BackupSize")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TariffName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Tariffs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BackupSize = 100m,
                            Price = 15m,
                            TariffName = "Normal"
                        },
                        new
                        {
                            Id = 2,
                            BackupSize = 50m,
                            Price = 3m,
                            TariffName = "Pozer"
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(65)
                        .HasColumnType("nvarchar(65)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "zzz",
                            Name = "Sobaka",
                            PhoneNumber = "123",
                            Surname = "Sob"
                        },
                        new
                        {
                            Id = 2,
                            Email = "zzz",
                            Name = "Cot",
                            PhoneNumber = "123",
                            Surname = "Co"
                        });
                });

            modelBuilder.Entity("DataLayer.Entities.Account", b =>
                {
                    b.HasOne("DataLayer.Entities.Storage", "Storage")
                        .WithMany("Accounts")
                        .HasForeignKey("IdStorage")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DataLayer.Entities.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DataLayer.Entities.Tariff", "Tariff")
                        .WithMany("Accounts")
                        .HasForeignKey("TariffType")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Storage");

                    b.Navigation("Tariff");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Entities.Backup", b =>
                {
                    b.HasOne("DataLayer.Entities.Storage", "Storage")
                        .WithMany("Backups")
                        .HasForeignKey("IdStorage")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DataLayer.Entities.Account", "Account")
                        .WithMany("Backups")
                        .HasForeignKey("TariffType")
                        .HasPrincipalKey("TariffType")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Account");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("DataLayer.Entities.Account", b =>
                {
                    b.Navigation("Backups");
                });

            modelBuilder.Entity("DataLayer.Entities.Storage", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Backups");
                });

            modelBuilder.Entity("DataLayer.Entities.Tariff", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("DataLayer.Entities.User", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
